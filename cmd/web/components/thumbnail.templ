package components

css bgImg(src string) {
	background-image: { "url("+src+")" };
}

templ Thumbnail(imgSrc string, title string, subTitle string, categories []string) {
	@Base() {
		<form
			id="thumbnail-form"
			hx-encoding="multipart/form-data"
			hx-post="/thumbnail"
			class="w-fit"
		>
			<div
				id="thumbnail-container"
				class="w-[720px] aspect-video overflow-hidden"
				contenteditable
			>
				<div id="thumbnail-template" class={ "w-full h-full relative bg-cover overflow-hidden cursor-pointer", bgImg(imgSrc) }>
					<div class="w-1/2 h-[200%] bg-white -rotate-[15deg] translate-x-[-30px] translate-y-[-100px] absolute cursor-default"></div>
					<div class="w-3/5 h-[200%] bg-white/50 -rotate-[15deg] translate-x-[-30px] translate-y-[-100px] absolute cursor-default"></div>
					<div class="absolute text-slate-900 font-geist max-w-[250px] h-full m-4">
						<div class="relative w-full h-full">
							<h1 id="title" class="text-6xl font-semibold my-8 cursor-text">
								{ title }
							</h1>
							<p id="subtitle" class="mb-4 text-2xl font-semibold border-b-2 py-4 cursor-text">{ subTitle }</p>
							<div id="categories" class="flex flex-wrap gap-1 w-full">
								for _,category := range categories {
									<span class="bg-indigo-400/90 text-white px-2 rounded-full cursor-text">{ category }</span>
								}
							</div>
						</div>
						<div class="absolute bottom-0 text-slate-900 text-sm mb-6 cursor-default" contenteditable="false">POWERED BY NETFLIXIFY</div>
					</div>
				</div>
				<input type="file" hidden="true" name="imgSrc"/>
				<input type="text" hidden="true" name="title"/>
				<input type="text" hidden="true" name="subtitle"/>
				<input type="text" hidden="true" name="categories"/>
			</div>
			<button id="saveBtn" class="bg-slate-900 text-white px-4 py-2 rounded-sm my-4 w-[720px]">Save as image</button>
		</form>
		<script>
				const template = document.getElementById("thumbnail-template");
				const form = document.getElementById("thumbnail-form");
				const [imgSrc, title, subtitle, categories] = form;
				const saveBtn = document.getElementById("saveBtn");
				const thumbnailContainer = document.getElementById("thumbnail-container");

				template.addEventListener("click", (e) => e.target.id=="thumbnail-template" && imgSrc.click());
	
				imgSrc.addEventListener("change", (e) => {
				  const [file] = imgSrc.files
				  if (file) {
				    template.style.backgroundImage = "url("+URL.createObjectURL(file)+")";
				  }
				});

				saveBtn.addEventListener("click", () => {
					title.value = document.getElementById("title").innerText;
					subtitle.value = document.getElementById("subtitle").innerText;
					categories.value = document.getElementById("categories").innerText.split("\n").join(",");
					saveBtn.innerHTML = "Loading..."
				})

				let isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);

				if (isMobile) {
				  // User is accessing the page on a mobile device
				  console.log("Mobile device detected");
				  thumbnailContainer.classList.replace("w-[720px]", "w-screen");
				  form.classList.add("mx-auto");
				} else {
				  // User is accessing the page on a desktop device
				  console.log("Desktop device detected");
				}
			</script>
	}
}

templ DownloadThumbnail(imgSrc string, fileName string) {
	@Base() {
		<img
			src={ imgSrc }
			alt={ fileName }
		/>
		<a href={ templ.SafeURL(imgSrc) } download={ fileName } class="bg-slate-900 text-white text-center px-4 py-2 rounded-sm my-4 w-[720px] block">Download</a>
	}
}
